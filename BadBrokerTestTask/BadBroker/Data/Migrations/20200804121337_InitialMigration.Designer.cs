// <auto-generated />
using System;
using BadBroker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BadBroker.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200804121337_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BadBroker.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("currency");
                });

            modelBuilder.Entity("BadBroker.Entities.Rate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BaseCurrencyId")
                        .HasColumnName("base_currency_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RateDate")
                        .HasColumnName("rate_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("RateValue")
                        .HasColumnName("rate_value")
                        .HasColumnType("numeric");

                    b.Property<int>("ResultCurrencyId")
                        .HasColumnName("result_currency_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("RateDate");

                    b.HasIndex("ResultCurrencyId");

                    b.ToTable("rate");
                });

            modelBuilder.Entity("BadBroker.Entities.Rate", b =>
                {
                    b.HasOne("BadBroker.Entities.Currency", "BaseCurrency")
                        .WithMany()
                        .HasForeignKey("BaseCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BadBroker.Entities.Currency", "ResultCurrency")
                        .WithMany()
                        .HasForeignKey("ResultCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
